"""
Django settings for django_multitenant_saas project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information:
https://docs.djangoproject.com/en/5.2/topics/settings/
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import environ

# BASE_DIR: project root directory
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment Variables Setup
env = environ.Env(
    DEBUG=(bool, False)
)
env_file = os.path.join(BASE_DIR, '.env')
if os.path.exists(env_file):
    environ.Env.read_env(env_file)

# Security settings
SECRET_KEY = env('SECRET_KEY')
DEBUG = env('DEBUG')

# Allowed hosts (configure via .env)
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['.localhost', '127.0.0.1',])

# APPLICATION DEFINITION
# Shared apps: apps used across all schemas
SHARED_APPS = [
    # Core tenant functionality
    'django_tenants',  
    # Tenant model and domain management      
    'clients',                   
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
# Tenant-specific apps: apps that exist within each tenant's schema
TENANT_APPS = [
    # Django REST framework
    'rest_framework',            
    # Tenant-specific note-taking app
    'notes',                     
]

INSTALLED_APPS = SHARED_APPS + TENANT_APPS

# Database router for syncing both shared and tenant apps
DATABASE_ROUTERS = ('django_tenants.routers.TenantSyncRouter',)


MIDDLEWARE = [
    'django_tenants.middleware.TenantMainMiddleware',  # Tenant resolution middleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# # Specify the models used by django-tenants
TENANT_MODEL = 'clients.Client'
TENANT_DOMAIN_MODEL = 'clients.Domain'

ROOT_URLCONF = 'django_multitenant_saas.urls'

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_multitenant_saas.wsgi.application'


DATABASES = {
    # Parses DATABASE_URL from .env
    'default': env.db(),        
}
# Use the django-tenants backend to provide schema-switching methods
DATABASES['default']['ENGINE'] = 'django_tenants.postgresql_backend'
DATABASES['default']['ATOMIC_REQUESTS'] = True

PUBLIC_SCHEMA_NAME = 'public'


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


STATIC_URL = '/static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}
